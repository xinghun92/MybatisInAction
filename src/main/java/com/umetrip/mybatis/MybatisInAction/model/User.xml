<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- <mapper namespace="com.umetrip.mybatis.MybatisInAction.model.UserMapper"> -->
<mapper namespace="com.umetrip.mybatis.MybatisInAction.interfaces.IUserOperation">
	<!--通过<resultMap>映射实体类属性名和表的字段名对应关系 -->
	<resultMap type="User" id="userResultMap">
		<!-- 用id属性来映射主键字段 -->
		<id property="id" column="userId" />
		<!-- 用result属性来映射非主键字段 -->
		<result property="name" column="userName" />
		<result property="age" column="userAge" />
		<result property="address" column="userAddress" />
	</resultMap>
	
	 <resultMap id="resultUserArticle" type="Article">
        <id property="id" column="articleid" />
        <result property="title" column="title" />
        <result property="content" column="content" />
        
        <!-- 直接定义 -->
        <!-- <association property="user" javaType="User">
            <id property="id" column="userid" />
            <result property="name" column="username" />
            <result property="address" column="useraddress" />            
        </association>  -->
        
        <!-- 引用先前定义的resultMap -->
        <association property="user" javaType="User" resultMap="userResultMap" />                
    </resultMap>
    
    
    <!-- select方法，单表 -->
	<select id="selectAll" parameterType="int" resultMap="userResultMap">
		select * from user
	</select>
	<select id="selectUserByID" resultMap="userResultMap">
		select * from user where userid = #{id}
	</select>
	<select id="selectUsersByName" parameterType="string" resultMap="userResultMap">
		select * from user where username like #{name}
	</select>
	
	<!-- select方法，联表 -->
	<select id="getUserArticles" parameterType="int" resultMap="resultUserArticle">
       select user.userid,user.userage,user.username,user.useraddress,article.articleid,article.title,article.content from user,article
              where user.userid=article.userid and user.userid=#{id}
    </select>
    
    
	<!-- 执行增加操作的SQL语句。id和parameterType 分别与IUserOperation接口中的addUser方法的名字和 参数类型一致。以#{name}的形式引用User参数 
		的name属性，MyBatis将使用反射读取User参数 的此属性。#{name}中name大小写敏感。引用其他 的gender等属性与此一致。seGeneratedKeys设置 
		为"true"表明要MyBatis获取由数据库自动生成的主 键；keyProperty="id"指定把获取到的主键值注入 到Student的id属性 -->
	<insert id="addUser" parameterType="User" useGeneratedKeys="true"
		keyProperty="id">
		insert into user(userName,userAge,userAddress)
		values(#{name},#{age},#{address})
	</insert>
	
	<!-- 更新操作 -->
	<update id="updateUserById" parameterType="User">
		update user set
		username=#{name},userage=#{age},useraddress=#{address}
		where userid=#{id}
	</update>
	
	<!-- 删除操作 -->
	<delete id="deleteUserById" parameterType="int">
		delete from user where userid=#{id}
	</delete>
	
</mapper>